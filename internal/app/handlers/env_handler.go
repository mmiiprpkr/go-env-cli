package handlers

import (
	"bufio"
	"fmt"
	"os"
	"strings"

	"go-env-cli/internal/app/models"
)

// EnvHandler handles environment variable operations
type EnvHandler struct {
	repo *models.Repository
}

// NewEnvHandler creates a new environment handler
func NewEnvHandler(repo *models.Repository) *EnvHandler {
	return &EnvHandler{repo: repo}
}

// ImportEnvFile imports environment variables from a .env file
func (h *EnvHandler) ImportEnvFile(filePath, projectName, environmentName string) error {
	// Check if project exists, create if not
	project, err := h.repo.GetProjectByName(projectName)
	if err != nil {
		// Project doesn't exist, create it
		project, err = h.repo.CreateProject(projectName, fmt.Sprintf("Project created from env file import: %s", filePath))
		if err != nil {
			return fmt.Errorf("failed to create project: %w", err)
		}
	}

	// Get or create environment
	env, err := h.repo.GetEnvironmentByName(environmentName)
	if err != nil {
		// Environment doesn't exist, create it
		env, err = h.repo.CreateEnvironment(environmentName, fmt.Sprintf("Environment created for project: %s", projectName))
		if err != nil {
			return fmt.Errorf("failed to create environment: %w", err)
		}
	}

	// Open and parse .env file
	file, err := os.Open(filePath)
	if err != nil {
		return fmt.Errorf("failed to open env file: %w", err)
	}
	defer file.Close()

	// Read the file line by line
	scanner := bufio.NewScanner(file)
	lineNumber := 0
	for scanner.Scan() {
		lineNumber++
		line := strings.TrimSpace(scanner.Text())

		// Skip empty lines and comments
		if line == "" || strings.HasPrefix(line, "#") || strings.HasPrefix(line, "//") {
			continue
		}

		// Parse key-value pairs
		parts := strings.SplitN(line, "=", 2)
		if len(parts) != 2 {
			return fmt.Errorf("invalid format at line %d: %s", lineNumber, line)
		}

		key := strings.TrimSpace(parts[0])
		value := strings.TrimSpace(parts[1])

		// Remove quotes if present
		if len(value) >= 2 && ((value[0] == '"' && value[len(value)-1] == '"') ||
			(value[0] == '\'' && value[len(value)-1] == '\'')) {
			value = value[1 : len(value)-1]
		}

		// Save to database
		_, err := h.repo.SetEnvVariable(project.ID, env.ID, key, value)
		if err != nil {
			return fmt.Errorf("failed to save env variable %s: %w", key, err)
		}
	}

	if err := scanner.Err(); err != nil {
		return fmt.Errorf("error reading env file: %w", err)
	}

	return nil
}

// ExportEnvFile exports environment variables to a .env file
func (h *EnvHandler) ExportEnvFile(filePath, projectName, environmentName string) error {
	// Check if project exists
	project, err := h.repo.GetProjectByName(projectName)
	if err != nil {
		return fmt.Errorf("project not found: %w", err)
	}

	// Get environment
	env, err := h.repo.GetEnvironmentByName(environmentName)
	if err != nil {
		return fmt.Errorf("environment not found: %w", err)
	}

	// Get all env variables for this project and environment
	variables, err := h.repo.GetEnvVariables(project.ID, env.ID)
	if err != nil {
		return fmt.Errorf("failed to get environment variables: %w", err)
	}

	// Create or truncate the file
	file, err := os.Create(filePath)
	if err != nil {
		return fmt.Errorf("failed to create env file: %w", err)
	}
	defer file.Close()

	// Write header
	file.WriteString(fmt.Sprintf("# Environment variables for %s - %s\n", projectName, environmentName))
	file.WriteString("# Generated by go-env-cli\n\n")

	// Write variables
	for _, v := range variables {
		file.WriteString(fmt.Sprintf("%s=%s\n", v.Key, v.Value))
	}

	return nil
}

// ListProjects lists all projects
func (h *EnvHandler) ListProjects() ([]models.Project, error) {
	return h.repo.GetAllProjects()
}

// SearchProjects searches for projects by name pattern
func (h *EnvHandler) SearchProjects(pattern string) ([]models.Project, error) {
	return h.repo.SearchProjects(pattern)
}

// SetEnvVariable sets an environment variable
func (h *EnvHandler) SetEnvVariable(projectName, environmentName, key, value string) error {
	// Check if project exists
	project, err := h.repo.GetProjectByName(projectName)
	if err != nil {
		return fmt.Errorf("project not found: %w", err)
	}

	// Get environment
	env, err := h.repo.GetEnvironmentByName(environmentName)
	if err != nil {
		return fmt.Errorf("environment not found: %w", err)
	}

	// Set the variable
	_, err = h.repo.SetEnvVariable(project.ID, env.ID, key, value)
	if err != nil {
		return fmt.Errorf("failed to set environment variable: %w", err)
	}

	return nil
}

// GetEnvVariable gets an environment variable by key
func (h *EnvHandler) GetEnvVariable(projectName, environmentName, key string) (string, error) {
	// Check if project exists
	project, err := h.repo.GetProjectByName(projectName)
	if err != nil {
		return "", fmt.Errorf("project not found: %w", err)
	}

	// Get environment
	env, err := h.repo.GetEnvironmentByName(environmentName)
	if err != nil {
		return "", fmt.Errorf("environment not found: %w", err)
	}

	// Get the variable
	variable, err := h.repo.GetEnvVariable(project.ID, env.ID, key)
	if err != nil {
		return "", fmt.Errorf("failed to get environment variable: %w", err)
	}

	return variable.Value, nil
}

// DeleteEnvVariable deletes an environment variable
func (h *EnvHandler) DeleteEnvVariable(projectName, environmentName, key string) error {
	// Check if project exists
	project, err := h.repo.GetProjectByName(projectName)
	if err != nil {
		return fmt.Errorf("project not found: %w", err)
	}

	// Get environment
	env, err := h.repo.GetEnvironmentByName(environmentName)
	if err != nil {
		return fmt.Errorf("environment not found: %w", err)
	}

	// Delete the variable
	err = h.repo.DeleteEnvVariable(project.ID, env.ID, key)
	if err != nil {
		return fmt.Errorf("failed to delete environment variable: %w", err)
	}

	return nil
}

// ListEnvVariables lists all environment variables for a project and environment
func (h *EnvHandler) ListEnvVariables(projectName, environmentName string) ([]models.EnvVariable, error) {
	// Check if project exists
	project, err := h.repo.GetProjectByName(projectName)
	if err != nil {
		return nil, fmt.Errorf("project not found: %w", err)
	}

	// Get environment
	env, err := h.repo.GetEnvironmentByName(environmentName)
	if err != nil {
		return nil, fmt.Errorf("environment not found: %w", err)
	}

	// Get variables
	variables, err := h.repo.GetEnvVariables(project.ID, env.ID)
	if err != nil {
		return nil, fmt.Errorf("failed to list environment variables: %w", err)
	}

	return variables, nil
}

// SoftDeleteProject soft-deletes a project
func (h *EnvHandler) SoftDeleteProject(projectName string) error {
	// Check if project exists
	project, err := h.repo.GetProjectByName(projectName)
	if err != nil {
		return fmt.Errorf("project not found: %w", err)
	}

	// Soft delete the project
	err = h.repo.SoftDeleteProject(project.ID)
	if err != nil {
		return fmt.Errorf("failed to soft delete project: %w", err)
	}

	return nil
}

// ListEnvironments lists all available environments
func (h *EnvHandler) ListEnvironments() ([]models.Environment, error) {
	return h.repo.GetAllEnvironments()
}

// CreateEnvironment creates a new environment
func (h *EnvHandler) CreateEnvironment(name, description string) error {
	_, err := h.repo.CreateEnvironment(name, description)
	if err != nil {
		return fmt.Errorf("failed to create environment: %w", err)
	}
	return nil
}

// SearchEnvVariables searches for environment variables by key pattern
func (h *EnvHandler) SearchEnvVariables(projectName, environmentName, keyPattern string) ([]models.EnvVariable, error) {
	// First get all variables
	variables, err := h.ListEnvVariables(projectName, environmentName)
	if err != nil {
		return nil, err
	}

	// Filter by key pattern
	var result []models.EnvVariable
	pattern := strings.ToLower(keyPattern)
	for _, v := range variables {
		if strings.Contains(strings.ToLower(v.Key), pattern) {
			result = append(result, v)
		}
	}

	return result, nil
}

// GetEnvironmentsForProject gets all environments used by a specific project
func (h *EnvHandler) GetEnvironmentsForProject(projectName string) ([]models.Environment, error) {
	// Check if project exists
	project, err := h.repo.GetProjectByName(projectName)
	if err != nil {
		return nil, fmt.Errorf("project not found: %w", err)
	}

	// Get environments
	environments, err := h.repo.GetEnvironmentsForProject(project.ID)
	if err != nil {
		return nil, fmt.Errorf("failed to get environments for project: %w", err)
	}

	return environments, nil
}
